/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingInterface extends Interface {
  getFunction(nameOrSignature: "getWinner"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProposalRegistered"
      | "Voted"
      | "VoterRegistered"
      | "WorkflowStatusChange"
  ): EventFragment;

  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
}

export namespace ProposalRegisteredEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [voter: AddressLike, proposalId: BigNumberish];
  export type OutputTuple = [voter: string, proposalId: bigint];
  export interface OutputObject {
    voter: string;
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voterAddress: AddressLike];
  export type OutputTuple = [voterAddress: string];
  export interface OutputObject {
    voterAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkflowStatusChangeEvent {
  export type InputTuple = [
    previousStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [previousStatus: bigint, newStatus: bigint];
  export interface OutputObject {
    previousStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getWinner: TypedContractMethod<[], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getWinner"
  ): TypedContractMethod<[], [bigint], "nonpayable">;

  getEvent(
    key: "ProposalRegistered"
  ): TypedContractEvent<
    ProposalRegisteredEvent.InputTuple,
    ProposalRegisteredEvent.OutputTuple,
    ProposalRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "WorkflowStatusChange"
  ): TypedContractEvent<
    WorkflowStatusChangeEvent.InputTuple,
    WorkflowStatusChangeEvent.OutputTuple,
    WorkflowStatusChangeEvent.OutputObject
  >;

  filters: {
    "ProposalRegistered(uint256)": TypedContractEvent<
      ProposalRegisteredEvent.InputTuple,
      ProposalRegisteredEvent.OutputTuple,
      ProposalRegisteredEvent.OutputObject
    >;
    ProposalRegistered: TypedContractEvent<
      ProposalRegisteredEvent.InputTuple,
      ProposalRegisteredEvent.OutputTuple,
      ProposalRegisteredEvent.OutputObject
    >;

    "Voted(address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VoterRegistered(address)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;

    "WorkflowStatusChange(uint8,uint8)": TypedContractEvent<
      WorkflowStatusChangeEvent.InputTuple,
      WorkflowStatusChangeEvent.OutputTuple,
      WorkflowStatusChangeEvent.OutputObject
    >;
    WorkflowStatusChange: TypedContractEvent<
      WorkflowStatusChangeEvent.InputTuple,
      WorkflowStatusChangeEvent.OutputTuple,
      WorkflowStatusChangeEvent.OutputObject
    >;
  };
}
